WEBVTT

00:03.080 --> 00:06.920
Bine ai revenit. Securitatea este un lucru foarte important pe web.

00:07.280 --> 00:14.360
Și în calitate de dezvoltatori, avem responsabilitatea de a ne asigura că orice informație despre utilizatori obținem

00:14.360 --> 00:17.160
cu grijă într-un mod sigur.

00:18.770 --> 00:27.160
Și până acum ți-am arătat cum să faci o simplă configurare de conectare, dar nu ți-am arătat sigur

00:27.160 --> 00:28.820
modalitatea de a face acest lucru.

00:30.190 --> 00:32.810
Și în acest videoclip voi vorbi despre bcrypt-nodejs.

00:32.890 --> 00:39.560
Și bcrypt este o bibliotecă foarte puternică.

00:40.660 --> 00:45.500
Aceasta ne permite să creăm o autentificare sigură.

00:45.500 --> 00:46.650
Ce înseamnă asta?

00:46.970 --> 00:49.000
Lasa-ma sa-ti arat.

00:49.120 --> 00:58.160
Până acum, am avut "cuvânt" doar în text simplu. In viata reala

00:58.250 --> 01:06.800
niciodată nu păstrăm parole ca texte simple ca asta, la fel ca un șir în baza noastră de date.

01:08.530 --> 01:16.300
Acesta este exact modul în care companiile se plictisesc și parolele sunt eliberate de utilizatori când stochează astfel.

01:16.300 --> 01:24.040
Vrem să stocăm parole în ceva numit hashes și voi ajunge la ceea ce este într-o secundă, dar eu

01:24.040 --> 01:31.540
doriți să schimbați baza de date în jur pentru a vă arăta o imagine mai realistă a modului în care vor fi stocate lucrurile.

01:31.540 --> 01:35.680
Vedeți în baza noastră de date că putem avea ceva de genul

01:39.730 --> 01:46.910
'login:' și această autentificare va conține o serie de obiecte

01:50.590 --> 01:51.760
care are un "id:"

01:51.880 --> 02:05.320
hai să spunem "987" cu hash-ul care va fi gol acum și apoi un e-mail și acest e-mail va fi doar

02:05.590 --> 02:08.150
referință john@gmail.com.

02:08.230 --> 02:12.480
Acesta este un lucru pe care îl vom lua mai mult în timp ce vorbim despre bazele de date.

02:12.680 --> 02:18.230
Dar vreau să vă arăt - vreau să vă demonstrez acest punct.

02:18.380 --> 02:27.920
Pentru a putea face față informațiilor sensibile, adică dacă John spune că intră pe site-ul nostru și dorește

02:27.920 --> 02:40.010
pentru a face o semnătură, el ne va da adresa de e-mail plus parola, care este "cookie-urile". Acum, el are încredere

02:40.010 --> 02:41.490
noi cu aceste informații.

02:41.690 --> 02:47.360
Și primul lucru pe care vrem să-l facem este că nu vom adăuga cu siguranță ca șir de interogări

02:47.720 --> 02:52.020
într-o solicitare GET - o vom adăuga la o solicitare POST.

02:52.040 --> 02:55.530
Deci este în corpul cererii.

02:55.940 --> 02:59.220
De asemenea, am dorit să le trimitem prin HTTPS.

02:59.420 --> 03:01.750
Este nevoie de un certificat.

03:02.180 --> 03:08.690
Și nu o să intrăm în asta, dar cu siguranță ne-o dorim să o includem printr-o solicitare HTTPS

03:08.690 --> 03:12.110
că este criptată. Când trimite "cookie-uri"

03:12.260 --> 03:20.510
va deveni criptata și nimeni la mijloc nu o va putea vedea sau o vor putea vedea, dar

03:20.510 --> 03:22.210
ei nu vor înțelege ce înseamnă.

03:22.520 --> 03:30.750
Și numai serverul după ce primește această parolă poate înțelege de fapt că aceasta înseamnă "cookie-uri".

03:32.100 --> 03:34.110
Bine, deci unul este HTTPS.

03:34.150 --> 03:38.010
Cel de-al doilea lucru este cum putem stoca parola?

03:39.230 --> 03:47.430
Ei bine, îl păstrăm într-un hash și bcrypt, pachetul pe care tocmai vorbeam, ne permite să facem asta.

03:47.480 --> 03:52.230
Permiteți-mi să descarc acest pachet și să vă arăt cum funcționează.

03:58.680 --> 03:59.250
Acolo te duci.

03:59.430 --> 04:07.300
Acum, cu bcrypt instalat puteți vedea aici că are câteva lucruri pe care le putem folosi și am de gând să copiați și să lipiți

04:07.300 --> 04:14.770
acest lucru și mutați unele din aceste lucruri în jurul valorii.

04:14.770 --> 04:16.440
Am de gând să o pun în cap.

04:20.490 --> 04:25.030
bcrypt ne oferă o modalitate de a avea o parolă

04:27.940 --> 04:29.650
și o modalitate de a compara

04:32.210 --> 04:35.970
parole sau hashes. Dar ce înseamnă asta?

04:36.070 --> 04:40.850
Să mergem unul câte unul.

04:41.030 --> 04:43.880
Dacă apuc această funcție și în "/ signin"

04:46.770 --> 04:55.530
sau îmi pare rău că cred în "/ register", pentru că atunci când ne dăm parola. În "/ register" -ul nostru când alergăm

04:57.620 --> 05:01.410
"bcrypt.hash" și în loc de "bacon"

05:01.420 --> 05:04.450
aceasta este ceea ce trecem ca parola utilizatorului

05:04.660 --> 05:11.640
- dacă trecem parola aici, avem și niște parametri pe care ni le dau

05:11.640 --> 05:13.240
și acestea sunt opțiuni pe care le putem introduce.

05:13.260 --> 05:15.200
Pentru moment, o să lăsăm așa cum este.

05:18.840 --> 05:28.050
Dacă am "console.log" hash-ul pe care îl primim în această funcție - așa că bcrypt va elimina parola

05:28.410 --> 05:33.780
și apoi returnați acest hash - vom spune doar "hash".

05:33.840 --> 05:35.550
Bine, să vedem ce se întâmplă aici.

05:35.580 --> 05:37.980
Mă duc să salvez. Atunci voi fugi

05:37.980 --> 05:44.000
'npm start' se întoarce la poștașul nostru.

05:44.160 --> 05:48.830
Dacă fac "/ înregistra" cu Ann - voi face clic pe Trimiteți

05:51.940 --> 05:56.070
și eu înțeleg că "bcrypt nu este definit" pentru că nu l-am inclus aici.

05:56.080 --> 06:02.090
Să facem acest lucru să facem 'const bcrypt = require (' bcrypt-nodejs ')'

06:05.360 --> 06:08.750
-

06:08.740 --> 06:12.730
Să salvăm asta și să încercăm din nou.

06:12.840 --> 06:13.870
Voi faceți clic pe trimiteți.

06:15.900 --> 06:28.030
Ne întoarcem la consola - vezi asta? Tocmai am primit un hash și asta este ceea ce face o funcție hash. O funcție hash

06:32.820 --> 06:44.030
O funcție hash are nevoie de un șir și o amestecă într-un mod care nu are cum să pot

06:44.030 --> 06:50.650
dați seama că acest [hash] reprezintă parola "cookies" și funcțiile hash sunt într-un fel.

06:50.970 --> 06:57.140
Adică puteți introduce "cookie-uri" și veți obține acest lucru, dar nu veți putea reveni niciodată.

06:57.620 --> 07:03.930
Și cealaltă calitate a funcțiilor hash este că dacă o fac acum din nou cu parola - Oh, cred că

07:03.930 --> 07:05.870
parola pentru Ann a fost "mere"

07:05.880 --> 07:14.460
- dacă dau clic pe trimite-mă întorc, văd că hash prima dată și a doua oară sunt diferite.

07:14.460 --> 07:19.920
Și deși funcțiile hash returnează întotdeauna același lucru pentru aceeași valoare bcrypt este a

07:19.920 --> 07:25.800
puțin mai sigur decât asta și adaugă un pic de altă magie pentru a vă asigura că este imposibil

07:25.950 --> 07:27.940
să dau seama ce este parola.

07:27.960 --> 07:37.270
Dar acum putem stoca acest hash - această valoare amestecată - în baza noastră de date aici pentru login și oricând

07:37.320 --> 07:43.560
ne conectăm și vrem să verificăm dacă parolele utilizatorului se potrivesc.

07:43.890 --> 07:47.800
Acum, permiteți-mi să elimin acest lucru

07:47.940 --> 07:48.600
- noi avem

07:52.130 --> 07:53.940
- hai să mergem la '/ signin' și în partea de sus

07:57.130 --> 08:05.090
putem compara hașile care au atins haosul pe care l-am avut înainte - hai să-l folosim pe acesta

08:05.390 --> 08:07.230
sau să folosim cea mai recentă pe care o avem.

08:08.160 --> 08:09.330
Voi înlocui asta.

08:09.330 --> 08:18.450
Va fi destul de urât, dar voi înlocui acest hash cu acest șir lung și voi merge

08:18.450 --> 08:19.230
pentru a compara

08:21.650 --> 08:26.170
"mere" pentru că asta este parola lui Ann.

08:26.240 --> 08:31.480
Dacă comparăm "mere" cu acest hash - hai console.log.

08:32.680 --> 08:34.480
"ghiciți întâi"

08:38.230 --> 08:42.730
vom avea din nou răspunsul

08:42.860 --> 08:46.970
- asta este ceea ce primim după ce bcrypt face asta.

08:47.140 --> 08:52.380
Iar pentru a doua oară vom face un "jurnal de consola" cu parola greșită, care este "veggies"

08:57.560 --> 09:04.480
și aceasta va fi "a doua presupunere".

09:04.510 --> 09:06.640
Să mergem să facem un Sign In.

09:06.640 --> 09:11.990
Nu contează cu adevărat ce este pentru că nu suntem foarte îngrijorați de un răspuns.

09:13.330 --> 09:21.180
Și am o eroare spunând hash nu este definită deoarece nu am actualizat acest hash la ceea ce noi doar

09:21.180 --> 09:21.930
copiat înainte.

09:21.930 --> 09:23.230
Așa că lasă-mă să fac asta.

09:26.480 --> 09:27.080
Acolo te duci.

09:28.860 --> 09:30.980
Permiteți-mi să mă întorc pe butonul Trimiteți.

09:32.320 --> 09:34.110
Dacă mă uit înapoi aici, mă înțeleg

09:34.120 --> 09:36.160
"prima presupunere este adevărată"

09:36.370 --> 09:39.920
adică "mere" este egal cu acest hash

09:39.940 --> 09:45.310
ne-au dat, dar "legumele" nu echivalează cu hașurile pe care le-au dat acolo.

09:48.400 --> 09:53.830
Lasă-mă să închid asta puțin. Și bcrypt este cu adevărat foarte puternic.

09:53.840 --> 09:59.780
Vom folosi acest lucru când implementăm o bază de date pentru înregistrarea noastră. Folosind bcrypt, care

09:59.780 --> 10:07.730
este un pachet hashing testat și testat, putem stoca în siguranță informațiile utilizatorilor, parolele utilizatorilor în site-ul nostru

10:07.730 --> 10:14.840
baza de date și nimeni, chiar dacă aceștia - chiar dacă hackerii accesează baza de date - vor avea dificultăți în a obține

10:14.840 --> 10:16.500
parolele utilizatorilor.

10:17.300 --> 10:22.370
S-ar putea să aibă posibilitatea de a-și primi adresele de e-mail, dar niciodată parolele noastre și vom implementa acest lucru în cadrul nostru

10:22.370 --> 10:25.770
bazei de date folosind bcrypt.

10:25.830 --> 10:29.940
Dar chiar vreau să subliniez acest punct, deoarece securitatea este foarte importantă.

10:30.930 --> 10:37.570
Trimiteți întotdeauna orice informații sensibile din partea frontală către back-end utilizând HTTPS

10:38.550 --> 10:48.960
într-un corp POST și dacă obțineți ceva de genul unei parole, modul în care îl stocați în baza de date utilizează

10:48.960 --> 10:51.820
ceva de genul bcrypt pentru a genera un hash,

10:52.140 --> 11:00.220
și de fiecare dată când un utilizator se conectează, verificați dacă hash cu orice utilizator introdus. În următoarea parte am

11:00.250 --> 11:01.210
lăsat pentru tine

11:01.330 --> 11:08.830
un articol de securitate pe care l-am scris, care poate fi un pic mai avansat, dar cred ca acopera cel mai bun mod

11:08.830 --> 11:14.710
pentru a stoca parolele utilizatorilor - ceva care este trecut cu vederea destul de des dar din nou foarte important dacă

11:14.710 --> 11:18.100
vrei să fii acel dezvoltator de top.

11:18.180 --> 11:19.770
Voi vedea în următorul. Pa! Pa
